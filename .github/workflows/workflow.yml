# This is a basic workflow to help you get started with Actions

name: docker push and build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main, dev]
    tags:
      - "v*"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            docker-id/image-name

          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
      - name: Build container image
        run: docker build -t ${{ secrets.REGISTRY_NAME }}/sampleapp:$(echo $GITHUB_SHA | head -c7) .

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Push image to DigitalOcean Container Registry
        run: docker push ${{ secrets.REGISTRY_NAME }}/sampleapp:$(echo $GITHUB_SHA | head -c7)

      # Save the right kuberenetes context depending on the branch name
      - name: Save DigitalOcean kubeconfig Staging
        if: github.ref == 'refs/heads/dev'
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

      # Save the right kuberenetes context depending on the branch name
      - name: Save DigitalOcean kubeconfig Production
        if: github.ref == 'refs/heads/main'
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

      # Kubernetes rollout the latest image
      - name: Kubernetes rollout the latest image
        run: kubectl -n default rollout restart deployment default

